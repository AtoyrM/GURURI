import pyxel
import math


class Stick:
    BASE_X = 92 # 基準座標(X)
    BASE_Y = 132 # 基準座標(Y)
    def __init__(self):
        pyxel.init(616, 696, fps=60) #ウィンドウサイズ

        pyxel.load('text.pyxres')

        

        self.timer = 0
        self.timer_s = 0
        self.speed = 0.03 # 回転する速度
        self.move = 0
        #self.intensity = 40 # 揺れ幅(回転する半径の大きさ = 線の長さ)→没

        self.xs = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
        self.ys = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]

        self.p = 0 

        self.death = 0 #死亡判定のとき1にする
        self.longi = 0.9 #接触判定に使用するprivateな変数その1
        self.longj = True #接触判定に使用するprivateな変数その2
        self.stage = 1 #現在のステージ番号(1から5まで使用)

        self.display_time = 0 #PRESS TO ～ の点滅表示に用いる変数

        self.start_window = True #タイトル画面表示中はTrue、それ以外ならFalse

        self.gameover_window = False #ゲームオーバー画面表示中はTrue、それ以外ならFalse

        self.clear_window = False #ゲームクリア画面表示中はTrue、それ以外ならFalse

       


        #9:左右に移動するブロック の座標の管理リスト
        self.lr_block = [[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], #4
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], #8
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], #12
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], #16
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], #20
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], #24
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0], #28
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                         [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]] #32
        

        #9:左右に移動するブロック の移動方向の管理リスト (1:左 2:右)
        self.lr_block_lr = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #4
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #8
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #12
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #16
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #20
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #24
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #28
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] #32
                            
        
       

        #(0:なし 1:正方形壁ブロック 2:スタート地点 3:ゴール地点 4:左下が直角の直角二等辺三角形 5:右下が直角 6:右上が直角 7:左上が直角 8:残機アップアイテム 9:左右に移動するブロック)
        self.map = [

                   [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #未使用
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #4
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #8
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #12
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #16
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #20
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #24
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #28
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],
                    
                   [[0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #STAGE1
                    [0,1,2,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
                    [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0], #4
                    [0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0], #8
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0], #12
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0], #16
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],#20
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0], #24
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,0,0,0,0,1,1,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0], #28
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],

                   [[0,0,0,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0], #STAGE2
                    [0,0,5,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0],
                    [0,0,1,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,4,0,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,5,7,0,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,0,1,0,0], #4
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0], #8
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], #12
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [1,0,0,0,0,0,0,0,9,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0], #16
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0], #20
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [1,0,0,0,0,9,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,9,0,0,0,1], #24
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0], #28
                    [0,0,1,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,0,6,1,1,1,1,1,1,1,1,1,1,1,1,7,0,0,0,0,0,0,1,0,0],
                    [0,0,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0],
                    [0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0]],

                   [[0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,0], #STAGE3
                    [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,4,0,0,0,0,0,6,4,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,0,1,0,0,0], #4
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
                    [0,0,1,0,0,0,9,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,8,0,0,1,0,0,0], #8
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0,1,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,7,0,0,0,0,0,0,1,0,0,0], #12
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,4,0,0,0,0,0,6,1,1,1,1,1,1,1,1,1,7,0,0,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,6,4,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0], #16
                    [0,0,0,1,0,0,0,0,0,1,0,6,4,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,6,4,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,6,4,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,6,4,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0], #20
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,6,4,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0],
                    [0,1,9,0,0,0,0,0,0,0,1,0,0,0,0,0,6,4,0,0,0,0,0,6,4,0,0,0,0,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,6,4,0,0,0,0,0,6,4,0,0,0,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,6,4,0,0,0,0,0,6,4,0,0,0,0,0], #24
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,0,6,4,0,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,0,6,4,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,0,1,0,0,0],
                    [0,0,0,1,3,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,1,0,0,0], #28
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0],
                    [0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0]],

                   [[0,0,1,2,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,1,0,0], #STAGE4
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0], #4
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [1,0,0,0,0,9,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,9,0,0,0,0,0,1], #8
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,8,0,0,0,0,8,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0], #12
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,9,0,0,0,9,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0], #16
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,9,0,0,0,9,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0], #20
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0], #24
                    [0,0,1,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0,1,0,0],
                    [0,0,1,0,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0,0,1,0,0],
                    [0,0,6,4,0,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0,0,5,7,0,0],
                    [0,0,0,6,4,0,0,0,0,0,0,6,4,0,0,0,0,0,0,5,7,0,0,0,0,0,0,5,7,0,0,0], #28
                    [0,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0],
                    [0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0],
                    [0,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0,0],
                    [0,0,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0,0,0]],

                   [[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,0], #STAGE5
                    [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0],
                    [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,0,0,0,0,0],
                    [0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,4,0,0,0,0,6,4,0,0,0,0,0,0,0,0], #4
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,6,1,1,1,0,0,0,0,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,9,0,0,0,0,0,1,0,0,0,0,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,9,0,0,0,0,0,1,0,0,0,0,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,4,0,0,0,0,6,4,0,0,0,0], #8
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,6,4,0,0,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,6,4,0,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,6,4,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,6,4], #12
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,4,0,0,0,0,6],
                    [1,0,0,0,0,0,9,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0], #16
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [1,0,9,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0], #20
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,7,0,0,0,0,0,0,5],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,9,0,0,0,0,0,0,5,7],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,9,0,0,0,0,0,0,1,0], #24
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,1,1,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0,0,5,7,0,0,0],
                    [0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,5,7,0,0,0,0,0,0,5,7,0,0,0,0],
                    [0,1,2,0,0,0,0,1,3,0,0,0,0,1,0,0,0,5,7,0,0,0,0,0,0,5,7,0,0,0,0,0], #28
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,7,0,0,0,0,0,0,5,7,0,0,0,0,0,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0,0,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0,0,0,0],
                    [0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,5,7,0,0,0,0,0,0,0,0,0]]
                    
                    ]
        
         #棒の長さ、スタート・ゴール地点の大きさを指定
        #整数(int)で指定
        #項目1つ目は必ず0にする
        #項目2つ目とステージ1が対応、項目3つ目とステージ2が対応…
        self.long = [0,5,5,5,5,5]

        self.life = 5 #初期残機




        self.stock = self.life

        #棒の位置をスタート地点に変更
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 2:
                    self.BASE_X = 20 + 9*self.long[self.stage] + x*18
                    self.BASE_Y = 60 + 9*self.long[self.stage] + y*18
                    self.BASE_X_s = 20 + 9*self.long[self.stage] + x*18
                    self.BASE_Y_s = 60 + 9*self.long[self.stage] + y*18


        #9:左右に移動するブロック の座標の管理リスト の初期化
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 9:
                    self.lr_block[y][x] = 20 + x*18
                    self.lr_block_lr[y][x] = 1


        pyxel.run(self.update, self.draw)
   

    def update(self):

        if self.display_time >= 59:
            self.display_time = 0
        else:
            self.display_time += 1
        


        if pyxel.btnp(pyxel.KEY_SPACE) and (not(self.start_window)) and (not(self.gameover_window)): # 回転の停止
            self.speed = 0
            self.move = (self.long[self.stage]**0.5) / (6 ** 0.5) * 1.5

        if pyxel.btnp(pyxel.KEY_SPACE) and self.start_window: # タイトル画面を閉じる
            self.start_window = False
            self.timer = 0

        if pyxel.btnp(pyxel.KEY_SPACE) and self.gameover_window: # ゲームオーバー画面を閉じる
            self.gameover_window = False
            self.timer = 0

            #9:左右に移動するブロック の座標の管理リスト の初期化
            for x in range(32):
                for y in range(32):
                    if self.map[self.stage][y][x] == 9:
                        self.lr_block[y][x] = 20 + x*18
                        self.lr_block_lr[y][x] = 1
        
        if pyxel.btn(pyxel.KEY_LEFT): # 矢印キーでの移動
            self.BASE_X_s -= self.move
        if pyxel.btn(pyxel.KEY_RIGHT):
            self.BASE_X_s += self.move
        if pyxel.btn(pyxel.KEY_UP):
            self.BASE_Y_s -= self.move
        if pyxel.btn(pyxel.KEY_DOWN):
            self.BASE_Y_s += self.move
            

        self.BASE_X = self.BASE_X_s // 1
        self.BASE_Y = self.BASE_Y_s // 1

        self.timer += self.speed
        self.timer_s += 0.03

        if self.timer >= math.pi * 2:
            self.timer -=  math.pi * 2

        if self.timer_s >= math.pi * 2:
            self.timer_s -=  math.pi * 2

        #self.y = self.BASE_Y + self.intensity * math.sin(self.timer%math.pi) * -1
        
        #回転する棒それぞれの要素の中心座標を計算しリストに代入
        for i in range(0, len(self.xs)):
            self.xs[i] = self.BASE_X + self.long[self.stage] * 0.9  * (i - 8) * math.cos(self.timer)
            self.ys[i] = self.BASE_Y + self.long[self.stage] * 0.9  * (8 - i) * math.sin(self.timer)

        #1:正方形壁ブロックと棒の当たり判定
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 1:
                    for i in range(0, len(self.xs)):
                        if i == 8:
                            self.longi = 1.44
                        else:
                            self.longi = 0.9

                        if (self.ys[i] > (60 + y*18) and self.ys[i] < (78 + y*18)) or (self.xs[i] > (20 + x*18) and self.xs[i] < (38 + x*18)):
                            if self.ys[i] > (60 + y*18) and self.ys[i] < (78 + y*18):
                                if self.xs[i] > (20 + x*18 - (self.long[self.stage] * self.longi)) and self.xs[i] < (38 + x*18 + (self.long[self.stage] * self.longi)):
                                    self.death = 1
                            if self.xs[i] > (20 + x*18) and self.xs[i] < (38 + x*18):
                                if self.ys[i] > (60 + y*18 - (self.long[self.stage] * self.longi)) and self.ys[i] < (78 + y*18 + (self.long[self.stage] * self.longi)):
                                    self.death = 1

                        else:
                            if (self.xs[i]-(20 + x*18))**2+(self.ys[i]-(60 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(38 + x*18))**2+(self.ys[i]-(60 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(20 + x*18))**2+(self.ys[i]-(78 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(38 + x*18))**2+(self.ys[i]-(78 + y*18))**2 <= (self.long[self.stage] * self.longi)**2:
                                self.death = 1

        #4:左下が直角の直角二等辺三角形と棒の当たり判定
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 4:
                    for i in range(0, len(self.xs)):
                        if i == 8:
                            self.longi = 1.44
                        else:
                            self.longi = 0.9

                        if ((self.ys[i] > (60 + y*18) and self.ys[i] < (78 + y*18)) and (self.xs[i] < (20 + x*18 + (self.long[self.stage] * self.longi)))) or ((self.xs[i] > (20 + x*18) and self.xs[i] < (38 + x*18)) and (self.ys[i] > (78 + y*18 - (self.long[self.stage] * self.longi)))):
                            if self.ys[i] > (60 + y*18) and self.ys[i] < (78 + y*18):
                                if self.xs[i] > (20 + x*18 - (self.long[self.stage] * self.longi)) and self.xs[i] < (20 + x*18 + (self.long[self.stage] * self.longi)):
                                    self.death = 1
                            if self.xs[i] > (20 + x*18) and self.xs[i] < (38 + x*18):
                                if self.ys[i] > (78 + y*18 - (self.long[self.stage] * self.longi)) and self.ys[i] < (78 + y*18 + (self.long[self.stage] * self.longi)):
                                    self.death = 1

                        elif (self.ys[i] + self.xs[i] < (78 + y*18) + (38 + x*18)) and (self.ys[i] + self.xs[i] > (60 + y*18) + (20 + x*18)) and (self.ys[i] - self.xs[i] < (78 + y*18) - (38 + x*18) + (self.long[self.stage] * self.longi) * (2**0.5)):
                            if self.ys[i] - self.xs[i] > (78 + y*18) - (38 + x*18) - (self.long[self.stage] * self.longi) * (2**0.5):
                                self.death = 1

                        else:
                            if (self.xs[i]-(20 + x*18))**2+(self.ys[i]-(60 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(20 + x*18))**2+(self.ys[i]-(60 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(20 + x*18))**2+(self.ys[i]-(78 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(38 + x*18))**2+(self.ys[i]-(78 + y*18))**2 <= (self.long[self.stage] * self.longi)**2:
                                self.death = 1


        #5:右下が直角の直角二等辺三角形と棒の当たり判定
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 5:
                    for i in range(0, len(self.xs)):
                        if i == 8:
                            self.longi = 1.44
                        else:
                            self.longi = 0.9

                        if ((self.ys[i] > (60 + y*18) and self.ys[i] < (78 + y*18)) and (self.xs[i] > (38 + x*18 - (self.long[self.stage] * self.longi)))) or ((self.xs[i] > (20 + x*18) and self.xs[i] < (38 + x*18)) and (self.ys[i] > (78 + y*18 - (self.long[self.stage] * self.longi)))):
                            if self.ys[i] > (60 + y*18) and self.ys[i] < (78 + y*18):
                                if self.xs[i] > (38 + x*18 - (self.long[self.stage] * self.longi)) and self.xs[i] < (38 + x*18 + (self.long[self.stage] * self.longi)):
                                    self.death = 1
                            if self.xs[i] > (20 + x*18) and self.xs[i] < (38 + x*18):
                                if self.ys[i] > (78 + y*18 - (self.long[self.stage] * self.longi)) and self.ys[i] < (78 + y*18 + (self.long[self.stage] * self.longi)):
                                    self.death = 1

                        elif (self.ys[i] - self.xs[i] < (78 + y*18) - (20 + x*18)) and (self.ys[i] - self.xs[i] > (60 + y*18) - (38 + x*18)) and (self.ys[i] + self.xs[i] < (60 + y*18) + (38 + x*18) + (self.long[self.stage] * self.longi) * (2**0.5)):
                            if self.ys[i] + self.xs[i] > (60 + y*18) + (38 + x*18) - (self.long[self.stage] * self.longi) * (2**0.5):
                                self.death = 1

                        else:
                            if (self.xs[i]-(38 + x*18))**2+(self.ys[i]-(60 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(38 + x*18))**2+(self.ys[i]-(60 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(20 + x*18))**2+(self.ys[i]-(78 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(38 + x*18))**2+(self.ys[i]-(78 + y*18))**2 <= (self.long[self.stage] * self.longi)**2:
                                self.death = 1

        
        #6:右上が直角の直角二等辺三角形と棒の当たり判定
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 6:
                    for i in range(0, len(self.xs)):
                        if i == 8:
                            self.longi = 1.44
                        else:
                            self.longi = 0.9

                        if ((self.ys[i] > (60 + y*18) and self.ys[i] < (78 + y*18)) and (self.xs[i] > (38 + x*18 - (self.long[self.stage] * self.longi)))) or ((self.xs[i] > (20 + x*18) and self.xs[i] < (38 + x*18)) and (self.ys[i] < (60 + y*18 + (self.long[self.stage] * self.longi)))):
                            if self.ys[i] > (60 + y*18) and self.ys[i] < (78 + y*18):
                                if self.xs[i] > (38 + x*18 - (self.long[self.stage] * self.longi)) and self.xs[i] < (38 + x*18 + (self.long[self.stage] * self.longi)):
                                    self.death = 1
                            if self.xs[i] > (20 + x*18) and self.xs[i] < (38 + x*18):
                                if self.ys[i] > (60 + y*18 - (self.long[self.stage] * self.longi)) and self.ys[i] < (60 + y*18 + (self.long[self.stage] * self.longi)):
                                    self.death = 1

                        elif (self.ys[i] + self.xs[i] < (78 + y*18) + (38 + x*18)) and (self.ys[i] + self.xs[i] > (60 + y*18) + (20 + x*18)) and (self.ys[i] - self.xs[i] > (78 + y*18) - (38 + x*18) - (self.long[self.stage] * self.longi) * (2**0.5)):
                            if self.ys[i] - self.xs[i] < (78 + y*18) - (38 + x*18) + (self.long[self.stage] * self.longi) * (2**0.5):
                                self.death = 1

                        else:
                            if (self.xs[i]-(20 + x*18))**2+(self.ys[i]-(60 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(38 + x*18))**2+(self.ys[i]-(60 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(38 + x*18))**2+(self.ys[i]-(78 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(38 + x*18))**2+(self.ys[i]-(78 + y*18))**2 <= (self.long[self.stage] * self.longi)**2:
                                self.death = 1


        #7:左上が直角の直角二等辺三角形と棒の当たり判定
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 7:
                    for i in range(0, len(self.xs)):
                        if i == 8:
                            self.longi = 1.44
                        else:
                            self.longi = 0.9

                        if ((self.ys[i] > (60 + y*18) and self.ys[i] < (78 + y*18)) and (self.xs[i] < (20 + x*18 + (self.long[self.stage] * self.longi)))) or ((self.xs[i] > (20 + x*18) and self.xs[i] < (38 + x*18)) and (self.ys[i] < (60 + y*18 + (self.long[self.stage] * self.longi)))):
                            if self.ys[i] > (60 + y*18) and self.ys[i] < (78 + y*18):
                                if self.xs[i] > (20 + x*18 - (self.long[self.stage] * self.longi)) and self.xs[i] < (20 + x*18 + (self.long[self.stage] * self.longi)):
                                    self.death = 1
                            if self.xs[i] > (20 + x*18) and self.xs[i] < (38 + x*18):
                                if self.ys[i] > (60 + y*18 - (self.long[self.stage] * self.longi)) and self.ys[i] < (60 + y*18 + (self.long[self.stage] * self.longi)):
                                    self.death = 1

                        elif (self.ys[i] - self.xs[i] < (78 + y*18) - (20 + x*18)) and (self.ys[i] - self.xs[i] > (60 + y*18) - (38 + x*18)) and (self.ys[i] + self.xs[i] > (60 + y*18) + (38 + x*18) - (self.long[self.stage] * self.longi) * (2**0.5)):
                            if self.ys[i] + self.xs[i] < (60 + y*18) + (38 + x*18) + (self.long[self.stage] * self.longi) * (2**0.5):
                                self.death = 1

                        else:
                            if (self.xs[i]-(20 + x*18))**2+(self.ys[i]-(60 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(38 + x*18))**2+(self.ys[i]-(60 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(20 + x*18))**2+(self.ys[i]-(78 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(20 + x*18))**2+(self.ys[i]-(78 + y*18))**2 <= (self.long[self.stage] * self.longi)**2:
                                self.death = 1


        #8:残機アップアイテムと棒の当たり判定
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 8:

                    self.longj = True

                    for i in range(0, len(self.xs)):
                        if i == 8:
                            self.longi = 1.44
                        else:
                            self.longi = 0.9

                        if (29 + x*18 - self.xs[i])**2 + (69 + y*18 - self.ys[i])**2 <= (self.long[self.stage] * self.longi + 9)**2 and self.longj:
                            self.stock += 1
                            self.map[self.stage][y][x] = 1008 #残機アップアイテムを消滅させる
                            self.longj = False #一つの残機アイテムに対して複数回残機回復処理が行われることを防ぐ

                    self.longj = True

        #9:左右に移動するブロック の座標制御
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 9:
                    #左に移動中に左に接触した場合
                    if self.lr_block_lr[y][x] == 1: #and (self.map[self.stage][y][(self.lr_block[y][x][0] - 21) // 18] >= 1 and self.map[self.stage][y][(self.lr_block[y][x][0] - 21) // 18] <= 7)
                        self.longj = False

                        #左側にスタート地点orゴール地点があるか
                        if self.lr_block[y][x] >= 21:
                            for xs in range(self.long[self.stage]):
                                for ys in range(self.long[self.stage]):
                                    if xs <= (self.lr_block[y][x] - 21) // 18 and ys <= y:
                                        if self.map[self.stage][y - ys][(self.lr_block[y][x] - 21) // 18 - xs] == 2 or self.map[self.stage][y - ys][(self.lr_block[y][x] - 21) // 18 - xs] == 3:
                                            self.longj = True


                        if self.lr_block[y][x] <= 20:
                            self.lr_block_lr[y][x] = 2
                        elif self.map[self.stage][y][(self.lr_block[y][x] - 21) // 18] >= 1 and self.map[self.stage][y][(self.lr_block[y][x] - 21) // 18] <= 7: #左にブロックが存在したなら
                            self.lr_block_lr[y][x] = 2
                        elif self.longj: #左側にスタート地点orゴール地点があるなら
                            self.lr_block_lr[y][x] = 2
                        else:
                            self.lr_block[y][x] -= 1

                        self.longj = False


                    #右に移動中に右に接触した場合 
                    elif self.lr_block_lr[y][x] == 2: #and (self.map[self.stage][y][(self.lr_block[y][x][0] - 21) // 18] >= 1 and self.map[self.stage][y][(self.lr_block[y][x][0] - 21) // 18] <= 7)
                        self.longj = False

                        #右側にスタート地点orゴール地点があるか
                        if (616-(self.lr_block[y][x] + 18)) >= 21:
                            for xs in range(self.long[self.stage]):
                                for ys in range(self.long[self.stage]):
                                    if xs <= ((616-(self.lr_block[y][x] + 18)) - 21) // 18 and ys <= y:
                                        if self.map[self.stage][y - ys][31-(((616-(self.lr_block[y][x] + 18)) - 21) // 18 + xs)] == 2 or self.map[self.stage][y - ys][31-(((616-(self.lr_block[y][x] + 18)) - 21) // 18 + xs)] == 3:
                                            self.longj = True


                        if (616-(self.lr_block[y][x] + 18)) <= 20:
                            self.lr_block_lr[y][x] = 1
                        elif self.map[self.stage][y][31-(((616-(self.lr_block[y][x] + 18)) - 21) // 18)] >= 1 and self.map[self.stage][y][31-(((616-(self.lr_block[y][x] + 18)) - 21) // 18)] <= 7: #左にブロックが存在したなら
                            self.lr_block_lr[y][x] = 1
                        elif self.longj: #右側にスタート地点orゴール地点があるなら
                            self.lr_block_lr[y][x] = 1
                        else:
                            self.lr_block[y][x] += 1

                        self.longj = False


        #9:左右に移動するブロックと棒の当たり判定
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 9:
                    for i in range(0, len(self.xs)):
                        if i == 8:
                            self.longi = 1.44
                        else:
                            self.longi = 0.9

                        if (self.ys[i] > (60 + y*18) and self.ys[i] < (78 + y*18)) or (self.xs[i] > (self.lr_block[y][x]) and self.xs[i] < (18 + self.lr_block[y][x])):
                            if self.ys[i] > (60 + y*18) and self.ys[i] < (78 + y*18):
                                if self.xs[i] > (self.lr_block[y][x] - (self.long[self.stage] * self.longi)) and self.xs[i] < (18 +self.lr_block[y][x] + (self.long[self.stage] * self.longi)):
                                    self.death = 1
                            if self.xs[i] > (self.lr_block[y][x]) and self.xs[i] < (18 + self.lr_block[y][x]):
                                if self.ys[i] > (60 + y*18 - (self.long[self.stage] * self.longi)) and self.ys[i] < (78 + y*18 + (self.long[self.stage] * self.longi)):
                                    self.death = 1

                        else:
                            if (self.xs[i]-self.lr_block[y][x])**2+(self.ys[i]-(60 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(18 + self.lr_block[y][x]))**2+(self.ys[i]-(60 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-self.lr_block[y][x])**2+(self.ys[i]-(78 + y*18))**2 <= (self.long[self.stage] * self.longi)**2 or (self.xs[i]-(18 + self.lr_block[y][x]))**2+(self.ys[i]-(78 + y*18))**2 <= (self.long[self.stage] * self.longi)**2:
                                self.death = 1

                        
                        




        #画面外黒帯と棒の当たり判定
        for i in range(0, len(self.xs)):
                        if i == 8:
                            self.longi = 1.44
                        else:
                            self.longi = 0.9
                        if (self.xs[i] <= (20 + (self.long[self.stage] * self.longi))) or (self.xs[i] >= (595 - (self.long[self.stage] * self.longi))) or (self.ys[i] <= (60 + (self.long[self.stage] * self.longi))) or (self.ys[i] >= (635 - (self.long[self.stage] * self.longi))):
                            self.death = 1


        #3:ゴール地点 の当たり判定
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 3:
                    if self.xs[8] >= 20 + x*18 and self.xs[8] < 20 + (x + self.long[self.stage])*18 and self.ys[8] >= 60 + y*18 and self.ys[8] < 60 + (y + self.long[self.stage])*18 and self.move > 0:
                        #初期化・ステージ進行
                      if self.stage < 5:
                        self.stage += 1

                        self.timer = 0
                        self.speed = 0.03 # 回転する速度
                        self.move = 0
                        self.death = 0

                        #棒の位置をスタート地点に変更
                        for x in range(32):
                            for y in range(32):
                                if self.map[self.stage][y][x] == 2:
                                    self.BASE_X = 20 + 9*self.long[self.stage] + x*18
                                    self.BASE_Y = 60 + 9*self.long[self.stage] + y*18
                                    self.BASE_X_s = 20 + 9*self.long[self.stage] + x*18
                                    self.BASE_Y_s = 60 + 9*self.long[self.stage] + y*18


                        #9:左右に移動するブロック の座標の管理リスト の初期化
                        for x in range(32):
                            for y in range(32):
                                if self.map[self.stage][y][x] == 9:
                                    self.lr_block[y][x] = 20 + x*18
                                    self.lr_block_lr[y][x] = 1
                      elif not(self.clear_window):
                          self.clear_window = True
                          self.death = 0
                          self.timer_s = 0
                      

        #死亡時の処理
        if self.death >= 1:
            #初期化
            self.timer = 0
            self.speed = 0.03 # 回転する速度
            self.move = 0
            self.death = 0

            self.stock -=1

            #コンテニュー処理
            if self.stock <= 0:
                self.gameover_window = True
                self.stage = 1
                self.stock = self.life
                self.display_time = 0


                #8:残機アップアイテム が取得済みの場合復活させる
                for x in range(32):
                    for y in range(32):
                        for stage in range(6):
                            if self.map[stage][y][x] == 1008:
                                self.map[stage][y][x] = 8

            #棒の位置をスタート地点に変更
            for x in range(32):
                for y in range(32):
                    if self.map[self.stage][y][x] == 2:
                        self.BASE_X = 20 + 9*self.long[self.stage] + x*18
                        self.BASE_Y = 60 + 9*self.long[self.stage] + y*18
                        self.BASE_X_s = 20 + 9*self.long[self.stage] + x*18
                        self.BASE_Y_s = 60 + 9*self.long[self.stage] + y*18


            #9:左右に移動するブロック の座標の管理リスト の初期化
            for x in range(32):
                for y in range(32):
                    if self.map[self.stage][y][x] == 9:
                        self.lr_block[y][x] = 20 + x*18
                        self.lr_block_lr[y][x] = 1

            





    def draw(self):
      pyxel.cls(0)
     
      if self.start_window:
        #タイトルロゴ表示
        pyxel.blt(139, 90, 2, 0, 0, 181, 80) #GUR
        pyxel.blt(333, 90, 2, 0, 90, 144, 80) #URI


        if self.display_time >= 30: 
            pyxel.blt(102, 600, 1, 0, 138, 227, 32) #PRESS SPACE
            pyxel.blt(344, 600, 1, 0, 170, 171, 32) #TO START
        

        #中央で回転する棒の描画
        pyxel.circ(308 + (- 144) * math.cos(self.timer_s), 385 + 144 * math.sin(self.timer_s), 18, 9)
        pyxel.circ(308 + 144 * math.cos(self.timer_s), 385 + (- 144) * math.sin(self.timer_s), 18, 9)
        pyxel.tri(308 + (- 144) * math.cos(self.timer_s)- 18 * math.sin(self.timer_s),385 + 144 * math.sin(self.timer_s)- 18 * math.cos(self.timer_s), 308 + (- 144) * math.cos(self.timer_s)+ 18 * math.sin(self.timer_s),385 + 144 * math.sin(self.timer_s)+ 18 * math.cos(self.timer_s),308 + 144 * math.cos(self.timer_s)- 18 * math.sin(self.timer_s),385 + (- 144) * math.sin(self.timer_s)- 18 * math.cos(self.timer_s),9)
        pyxel.tri(308 + 144 * math.cos(self.timer_s)+ 18 * math.sin(self.timer_s),385 + (- 144) * math.sin(self.timer_s)+ 18 * math.cos(self.timer_s), 308 + (- 144) * math.cos(self.timer_s)+ 18 * math.sin(self.timer_s),385 + 144 * math.sin(self.timer_s)+ 18 * math.cos(self.timer_s),308 + 144 * math.cos(self.timer_s)- 18 * math.sin(self.timer_s),385 + (- 144) * math.sin(self.timer_s)- 18 * math.cos(self.timer_s),9)
        pyxel.circ(308, 385, 28.8, 10)
    

      elif self.clear_window:
         pyxel.blt(69, 90, 0, 4, 178, 212, 74) #GAME
         pyxel.blt(306, 90, 0, 4, 101, 242, 74) #CLEAR

         pyxel.blt(70, 600, 1, 0, 74, 212, 32) #THANK YOU
         pyxel.blt(297, 600, 1, 0, 106, 250, 32) #FOR PLAYING!

         #中央で回転する棒の描画
         pyxel.circ(308 + (- 144) * math.cos(self.timer_s), 385 + 144 * math.sin(self.timer_s), 18, 9)
         pyxel.circ(308 + 144 * math.cos(self.timer_s), 385 + (- 144) * math.sin(self.timer_s), 18, 9)
         pyxel.tri(308 + (- 144) * math.cos(self.timer_s)- 18 * math.sin(self.timer_s),385 + 144 * math.sin(self.timer_s)- 18 * math.cos(self.timer_s), 308 + (- 144) * math.cos(self.timer_s)+ 18 * math.sin(self.timer_s),385 + 144 * math.sin(self.timer_s)+ 18 * math.cos(self.timer_s),308 + 144 * math.cos(self.timer_s)- 18 * math.sin(self.timer_s),385 + (- 144) * math.sin(self.timer_s)- 18 * math.cos(self.timer_s),9)
         pyxel.tri(308 + 144 * math.cos(self.timer_s)+ 18 * math.sin(self.timer_s),385 + (- 144) * math.sin(self.timer_s)+ 18 * math.cos(self.timer_s), 308 + (- 144) * math.cos(self.timer_s)+ 18 * math.sin(self.timer_s),385 + 144 * math.sin(self.timer_s)+ 18 * math.cos(self.timer_s),308 + 144 * math.cos(self.timer_s)- 18 * math.sin(self.timer_s),385 + (- 144) * math.sin(self.timer_s)- 18 * math.cos(self.timer_s),9)
         pyxel.circ(308, 385, 28.8, 10)



      elif self.gameover_window:
         pyxel.blt(94, 138, 0, 4, 178, 212, 74) #GAME
         pyxel.blt(331, 138, 1, 0, 0, 191, 74) #OVER

         if self.display_time >= 30: 
            pyxel.blt(102, 552, 1, 0, 138, 227, 32) #PRESS SPACE
            pyxel.blt(344, 552, 1, 0, 202, 171, 32) #TO RETRY   

      else:

        #背景の描画
        pyxel.rect(0, 0, 616, 696, 7) #白背景
        pyxel.rect(0, 0, 616, 60, 0) #上黒帯
        pyxel.rect(0, 636, 616, 60, 0) #下黒帯
        pyxel.rect(0, 0, 20, 696, 0) #左黒帯
        pyxel.rect(596, 0, 20, 696, 0) #右黒帯


        #残り残機の表示
        pyxel.blt(14, 6, 0, 0, 48, 96, 48) #life
        pyxel.blt(114, 8, 0, 222, 48, 24, 51) #:

        if self.stock >= 100:
            pyxel.blt(128, 6, 0, (self.stock // 100) * 24 , 0, 24, 48) #100の位
            pyxel.blt(152, 6, 0, ((self.stock % 100)//10) * 24 , 0, 24, 48) #10の位
            pyxel.blt(176, 6, 0, (self.stock % 10) * 24 , 0, 24, 48) #1の位
        elif self.stock >= 10:
            pyxel.blt(134, 6, 0, (self.stock // 10) * 24 , 0, 24, 48) #10の位
            pyxel.blt(164, 6, 0, (self.stock % 10) * 24 , 0, 24, 48) #1の位
        else:
            pyxel.blt(149, 6, 0, self.stock * 24 , 0, 24, 48) #1の位

        pyxel.blt(422, 8, 0, 96, 48, 144, 51) #stage:
        pyxel.blt(572, 6, 0, self.stage * 24, 0, 24, 48) #ステージ番号

        #1:正方形壁ブロック の描画
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 1:
                    pyxel.rect(20 + x*18, 60 + y*18, 18, 18, 0)

        #4:左下が直角の直角二等辺三角形 の描画
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 4:
                    pyxel.tri(20 + x*18, 60 + y*18, 20 + x*18, 77 + y*18, 37 + x*18, 77 + y*18, 0)

        #5:右下が直角の直角二等辺三角形 の描画
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 5:
                    pyxel.tri(20 + x*18, 77 + y*18, 37 + x*18, 60 + y*18, 37 + x*18, 77 + y*18, 0)

        #6:右上が直角の直角二等辺三角形 の描画
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 6:
                    pyxel.tri(20 + x*18, 60 + y*18, 37 + x*18, 60 + y*18, 37 + x*18, 77 + y*18, 0)

        #7:左上が直角の直角二等辺三角形 の描画
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 7:
                    pyxel.tri(20 + x*18, 60 + y*18, 20 + x*18, 77 + y*18, 37 + x*18, 60 + y*18, 0)

        #9:左右に移動するブロック の描画
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 9:
                    pyxel.rect(self.lr_block[y][x], 60 + y*18, 18, 18, 0)

        #8:残機アップアイテム の描画
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 8:
                    pyxel.circ(29 + x*18, 69 + y*18, 9, 3)
                    pyxel.text(24 + x*18, 67 + y*18, "1UP", 7)



        #2:スタート地点 の描画
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 2:
                    pyxel.rect(20 + x*18, 60 + y*18, 18*self.long[self.stage], 18*self.long[self.stage], 3)
                    pyxel.circ(20 + 8.75*self.long[self.stage] + x*18, 60 + 8.75*self.long[self.stage] + y*18, 8*self.long[self.stage], 10)
                    pyxel.circ(20 + 8.75*self.long[self.stage] + x*18, 60 + 8.75*self.long[self.stage] + y*18, 8*self.long[self.stage]-1, 11)
                    pyxel.circ(20 + 8.75*self.long[self.stage] + x*18, 60 + 8.75*self.long[self.stage] + y*18, 6.67*self.long[self.stage], 10)
                    pyxel.circ(20 + 8.75*self.long[self.stage] + x*18, 60 + 8.75*self.long[self.stage] + y*18, 6.67*self.long[self.stage]-1, 11)

        #3:ゴール地点 の描画
        for x in range(32):
            for y in range(32):
                if self.map[self.stage][y][x] == 3:
                    pyxel.rect(20 + x*18, 60 + y*18, 18*self.long[self.stage], 18*self.long[self.stage], 8)
                        

        pyxel.circ(self.xs[0], self.ys[0], self.long[self.stage] * 0.9, 9)
        pyxel.circ(self.xs[16], self.ys[16], self.long[self.stage] * 0.9, 9)
        pyxel.tri(self.xs[0]- self.long[self.stage] * 0.9 * math.sin(self.timer),self.ys[0]- self.long[self.stage] * 0.9 * math.cos(self.timer), self.xs[0]+ self.long[self.stage] * 0.9 * math.sin(self.timer),self.ys[0]+ self.long[self.stage] * 0.9 * math.cos(self.timer),self.xs[16]- self.long[self.stage] * 0.9 * math.sin(self.timer),self.ys[16]- self.long[self.stage] * 0.9 * math.cos(self.timer),9)
        pyxel.tri(self.xs[16]+ self.long[self.stage] * 0.9 * math.sin(self.timer),self.ys[16]+ self.long[self.stage] * 0.9 * math.cos(self.timer), self.xs[0]+ self.long[self.stage] * 0.9 * math.sin(self.timer),self.ys[0]+ self.long[self.stage] * 0.9 * math.cos(self.timer),self.xs[16]- self.long[self.stage] * 0.9 * math.sin(self.timer),self.ys[16]- self.long[self.stage] * 0.9 * math.cos(self.timer),9)
        pyxel.circ(self.xs[8], self.ys[8], self.long[self.stage] * 1.44, 10)
        
        #デバッグ用
        #pyxel.text(200, 200,str(self.death), 6)
        #pyxel.text(200, 210,str(self.stock), 6)
        

        
            
Stick()